<<: !include base.yaml

# global varibles
globals:
  - id: current_lightslider_val
    type: int
    restore_value: true
    initial_value: '60'

  - id: light_to_dim
    type: int
    restore_value: true
    initial_value: '0'


substitutions:
  node_name: nspanel
  device_name: NSPanel
  media_player: media_player.spotify_matthijs_vos
  rtttl_beep: "beep:d=4,o=6,b=100:16e6"
  guest_wifi_pwd: !secret guest_wifi_pwd

  light0: light.bedroom_lights
  light1: light.kitchen_light
  light2: light.shower_light
  light3: light.wled_master
  light5: input_boolean.guests

external_components:
  - source: github://Matthijsy/esphome@dev
    components: [nextion]
    refresh: 1h

esphome:
  name: $node_name
  comment: $device_name

esp32:
  board: esp32dev

logger:
  baud_rate: 0
  level: DEBUG

api:
  services:
  # Play songs using rtttl
  - service: play_rtttl
    variables:
      song_str: string
    then:
     - rtttl.play:
         rtttl: !lambda 'return song_str;'

  # Update the Nextion HMI file
  - service: upload_tft
    then:
      - lambda: 'id(disp1)->upload_tft();'

  # Activate the screen
  - service: wakeup_screen
    then:
      - lambda: |-
          id(disp1).send_command_printf("page 0");

  # Service to show a notification on the screen for 15 s. Tap or wait to close
  - service: notification
    variables:
      header: string
      message: string
    then:
      - lambda: |-
          id(disp1).set_component_text_printf("Notifications.head", "%s", header.c_str());
          id(disp1).set_component_text_printf("Notifications.body", "%s", message.c_str());
          id(disp1).send_command_printf("page 6");
      - rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"
      - delay: 15s
      - lambda: |-
          id(disp1).send_command_printf("page 0");
          id(disp1).set_component_text_printf("Notifications.head", " ");
          id(disp1).set_component_text_printf("Notifications.body", " ");
          id(disp1).send_command_printf("page 0");

  # Service to show a QR code on the display (ex. for WiFi password)
  - service: display_qrs
    variables:
      qrdata: string
    then:
      - lambda: |-
          id(disp1).send_command_printf("page 7");
          id(disp1).set_component_text_printf("QR.qr0", "%s", qrdata.c_str());
      - delay: 15s
      - lambda: |-
          id(disp1).send_command_printf("page 0");
          id(disp1).send_command_printf("QR.qr0.txt=");
          id(disp1).send_command_printf("page 0");

  # Service to send a command directly to the display. Useful for testing
  - service: send_command
    variables:
      cmd: string
    then:
      - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'

  - service: set_text
    variables:
      element: string
      text: string
    then:
      - lambda: 'id(disp1).set_component_text_printf(element.c_str(), text.c_str());'

# A reboot button is always useful
button:
  - platform: restart
    name: $device_name Restart


# Time component that fetches time from Home Assistant and updates the display once a minute and when the display is ready at bootup (and time is available).
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: id(disp1).set_component_text_printf("Home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
          - lambda: id(disp1).set_component_text_printf("Home.date", "%02i-%02i-%i",  id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);
    on_time_sync:
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: id(disp1).set_component_text_printf("Home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
          - lambda: id(disp1).set_component_text_printf("Home.date", "%02i-%02i-%i",  id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);


# Binary sensors
binary_sensor:
  # ---- Physical buttons -----
  - platform: gpio
    name: $device_name Left Button
    internal: true
    pin:
      number: 14
      inverted: true
    on_click:
    - min_length: 2000ms
      max_length: 6000ms
      then:
        - switch.toggle: relay_1
        - switch.toggle: relay_2
    - min_length: 50ms
      max_length: 350ms
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: $light0

  - platform: gpio
    internal: true
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light2
    on_double_click:
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: group.all



  # Lights brightness slider
  - platform: nextion
    name: $device_name light_slider
    page_id: 2
    component_id: 24
    internal: true
    on_release: # on release of slider
      then:
        # Slider dims light 0
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 0;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light0
                    brightness: !lambda return id(current_lightslider_val);
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 1;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light1
                    brightness: !lambda return id(current_lightslider_val);
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 2;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light2
                    brightness: !lambda return id(current_lightslider_val);
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 3;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light3
                    brightness: !lambda return id(current_lightslider_val);
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 4;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light4
                    brightness: !lambda return id(current_lightslider_val);
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 5;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light5
                    brightness: !lambda return id(current_lightslider_val);


    # ---- Home page Buttons -----
  - platform: nextion
    name: $device_name WiFi button
    page_id: 0
    component_id: 19
    internal: true
    on_click:
      - lambda: |-
          id(disp1).send_command_printf("page 7");
          id(disp1).set_component_text_printf("QR.qr0", "WIFI:T:WPA;S:Matthijs - Guests;P:$guest_wifi_pwd;;");



  # ---- Lights Page Buttons (page 2, components 13/14 19-22) -----
  # Light 0
  - platform: nextion
    name: $device_name Light 0 button
    page_id: 2
    component_id: 13
    internal: true
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light0
    on_multi_click:
      - timing:
          - ON for at least 1s
        then:
          - globals.set:
              id: light_to_dim
              value: "0"
          - lambda: |-
              int symbol=45;
              id(disp1).send_command_printf("Lights.p0.pic=%i", symbol);

  # Light 1
  - platform: nextion
    name: $device_name Light 1 button
    page_id: 2
    component_id: 14
    internal: true
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light1
    on_multi_click:
      - timing:
          - ON for at least 1s
        then:
          - globals.set:
              id: light_to_dim
              value: "1"
          - lambda: |-
              int symbol=45;
              id(disp1).send_command_printf("Lights.p0.pic=%i", symbol);

  # Light 2
  - platform: nextion
    name: $device_name Light 2 button
    page_id: 2
    component_id: 19
    internal: true
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light2
    on_multi_click:
      - timing:
          - ON for at least 1s
        then:
          - globals.set:
              id: light_to_dim
              value: "2"
          - lambda: |-
              int symbol=45;
              id(disp1).send_command_printf("Lights.p0.pic=%i", symbol);

  # Light 3
  - platform: nextion
    name: $device_name Light 3 button
    page_id: 2
    component_id: 20
    internal: true
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light3
    on_multi_click:
      - timing:
          - ON for at least 1s
        then:
          - globals.set:
              id: light_to_dim
              value: "3"
          - lambda: |-
              int symbol=45;
              id(disp1).send_command_printf("Lights.p0.pic=%i", symbol);

  # Light 5
  - platform: nextion
    name: $device_name Light 5 button
    page_id: 2
    component_id: 22
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.toggle
          data:
            entity_id: $light5


  # ---- Music Page Buttons -----
  - platform: nextion
    name: $device_name Music play pause
    page_id: 1
    component_id: 1
    internal: true
    on_click:
      - rtttl.play: $rtttl_beep
      - homeassistant.service:
          service: media_player.media_play_pause
          data:
            entity_id: $media_player

  - platform: nextion
    name: $device_name Music voldown
    page_id: 1
    component_id: 4
    internal: true
    on_click:
      - rtttl.play: $rtttl_beep
      - homeassistant.service:
          service: media_player.volume_down
          data:
            entity_id: $media_player

  - platform: nextion
    name: $device_name Music volup
    page_id: 1
    component_id: 5
    internal: true
    on_click:
      - rtttl.play: $rtttl_beep
      - homeassistant.service:
          service: media_player.volume_up
          data:
            entity_id: $media_player

  - platform: nextion
    name: $device_name Music previous
    page_id: 1
    component_id: 13
    internal: true
    on_click:
      - rtttl.play: $rtttl_beep
      - homeassistant.service:
          service: media_player.media_previous_track
          data:
            entity_id: $media_player

  - platform: nextion
    name: $device_name Music next
    page_id: 1
    component_id: 14
    internal: true
    on_click:
      - rtttl.play: $rtttl_beep
      - homeassistant.service:
          service: media_player.media_next_track
          data:
            entity_id: $media_player

  - platform: nextion
    name: $device_name Music cast
    page_id: 1
    component_id: 2
    internal: true
    on_click:
      - rtttl.play: $rtttl_beep
      - homeassistant.service:
          service: media_player.select_source
          data:
            entity_id: $media_player
            source: MatthijsRoom

  - platform: nextion
    name: $device_name Playlist 1
    page_id: 1
    component_id: 6
    internal: true
    on_click:
      - homeassistant.service:
          service: media_player.play_media
          data:
            entity_id: $media_player
            media_content_id: https://open.spotify.com/playlist/37i9dQZF1E3a23IDSlzuhV
            media_content_type: playlist

  - platform: nextion
    name: $device_name Playlist 2
    page_id: 1
    component_id: 7
    internal: true
    on_click:
      - homeassistant.service:
          service: media_player.play_media
          data:
            entity_id: $media_player
            media_content_id: https://open.spotify.com/playlist/37i9dQZF1E38Vjmfm6MVuj
            media_content_type: playlist

  - platform: nextion
    name: $device_name Playlist 3
    page_id: 1
    component_id: 8
    internal: true
    on_click:
      - homeassistant.service:
          service: media_player.play_media
          data:
            entity_id: $media_player
            media_content_id: https://open.spotify.com/playlist/37i9dQZF1E35Vx7Ign0Tj3
            media_content_type: playlist

  - platform: nextion
    name: $device_name Playlist 4
    page_id: 1
    component_id: 9
    internal: true
    on_click:
      - homeassistant.service:
          service: media_player.play_media
          data:
            entity_id: $media_player
            media_content_id: https://open.spotify.com/playlist/37i9dQZF1DZ06evO4djCVf
            media_content_type: playlist

  # ---- Timer Page Buttons -----
  # - platform: nextion
  #   name: $device_name Timer up
  #   page_id: 8
  #   component_id: 4
  #   internal: true
  #   on_click:
  #     - rtttl.play: $rtttl_beep
  #     - homeassistant.service:
  #         service: counter.increment
  #         data:
  #           entity_id: counter.timer
  #
  # - platform: nextion
  #   name: $device_name Timer down
  #   page_id: 8
  #   component_id: 3
  #   internal: true
  #   on_click:
  #     - rtttl.play: $rtttl_beep
  #     - homeassistant.service:
  #         service: counter.decrement
  #         data:
  #           entity_id: counter.timer
  #
  # - platform: nextion
  #   name: $device_name Timer toggle
  #   page_id: 8
  #   component_id: 11
  #   internal: true
  #   on_click:
  #     - rtttl.play: $rtttl_beep
  #     - homeassistant.service:
  #         service: timer.start
  #         data:
  #           entity_id: timer.timer

sensor:
  # Internal temperature sensor, adc value
  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  # Internal temperature sensor, adc reading converted to resistance (calculation)
  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  # Internal temperature sensor, resistance to temperature (calculation)
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Thermostat.cctemp", "%.0f", id(temperature).state);
        - lambda: id(disp1).set_component_text_printf("NewThermo.t0", "%.0f", id(temperature).state);

  # Temperature inside, fetched from HA
  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.temperature_temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Home.temp", "%.1f", id(current_temperature).state);

  # Temperature outside feels like, fetched from HA
  - platform: homeassistant
    id: temp_feelslike
    entity_id: sensor.home_realfeel_temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Home.tempfl", "%.1f", id(temp_feelslike).state);


  # Uptime for the display. Also updates a human readable one (further down)
  - platform: uptime
    name: $device_name Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
                int seconds = round(id(uptime_sensor).raw_state);
                int days = seconds / (24 * 3600);
                seconds = seconds % (24 * 3600);
                int hours = seconds / 3600;
                seconds = seconds % 3600;
                int minutes = seconds /  60;
                seconds = seconds % 60;
                return (
                  (days ? to_string(days) + "d " : "") +
                  (hours ? to_string(hours) + "h " : "") +
                  (minutes ? to_string(minutes) + "m " : "") +
                  (to_string(seconds) + "s")
                ).c_str();

  # WiFi signals strength sensor
  - platform: wifi_signal
    name: $device_name WiFi Signal Sensor
    update_interval: 60s

    # CURRENT PAGE DISPLAYED ON HMI.
#  - platform: nextion
#    name: $device_name Current display page
#    id: disp1_current_page
#    variable_name: dp
#    update_interval: 1s

  # Light slider value, set on global value
  - platform: nextion
    id: lightslider
    name: $device_name lightslider
    variable_name: lightslider
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - globals.set:
            id: current_lightslider_val
            value: !lambda 'return int(x);'
          # send text field percentage of current_lightslider_val
        - lambda: id(disp1).set_component_text_printf("Lights.t1", "%i", id(current_lightslider_val) *100 /255);

text_sensor:
  # ESPHome version used to compile the app
  - platform: version
    name: $device_name ESPHome Version

  # Sun sensor from HA
  - platform: homeassistant
    id: sun_sun
    entity_id: sun.sun

  # Uptime in a human readable form. Updated from the uptime sensor
  - platform: template
    name: $device_name Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

  # Media player entity (or any text entity) to pull currently playing song name from
  - platform: homeassistant
    id: music_artist
    entity_id: $media_player
    attribute: media_artist
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Music.music_sn", "%s", id(music_artist).state.c_str());

  # Media player title from HA
  - platform: homeassistant
    id: music_title
    entity_id: $media_player
    attribute: media_title
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Music.music_an", "%s", id(music_title).state.c_str());

  # Weather symbol, HA weather entity to pull data from
  - platform: homeassistant
    id: weather_symbol
    entity_id: weather.home
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol=6; // 5 is a empty box.
            if (id(weather_symbol).state == "clear-night") {
              symbol=7;
            } else if (id(weather_symbol).state == "cloudy") {
              symbol=8;
              if (id(sun_sun).state == "below_horizon") {
                symbol=15;
              }
            } else if (id(weather_symbol).state == "fog") {
              symbol=9;
            } else if (id(weather_symbol).state == "hail" || id(weather_symbol).state == "snowy-rainy") {
              symbol=13;
            } else if (id(weather_symbol).state == "lightning") {
              symbol=12;
            } else if (id(weather_symbol).state == "lightning-rainy" || id(weather_symbol).state == "exceptional") {
              symbol=19;
              if (id(sun_sun).state == "below_horizon") {
                symbol=18;
              }
            } else if (id(weather_symbol).state == "partlycloudy") {
              symbol=14;
              if (id(sun_sun).state == "below_horizon") {
                symbol=15;
              }
            } else if (id(weather_symbol).state == "pouring") {
              symbol=10;
            } else if (id(weather_symbol).state == "rainy") {
              symbol=16;
            } else if (id(weather_symbol).state == "snowy") {
              symbol=17;
            } else if (id(weather_symbol).state == "sunny") {
              symbol=20;
              if (id(sun_sun).state == "below_horizon") {
                symbol = 7;
              }
            } else if (id(weather_symbol).state == "windy" || id(weather_symbol).state == "windy-variant") {
              symbol=21;
            }
            id(disp1).send_command_printf("Home.weather_symbol.pic=%i", symbol);

  # Korte broek from HA
  - platform: homeassistant
    id: kortebroek
    entity_id: sensor.kortebroek
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 48;
            if (id(kortebroek).state == "True") {
              symbol=49;
            }
            id(disp1).send_command_printf("Home.kortebroek.pic=%i", symbol);
        - lambda: id(disp1).set_component_text_printf("Stopwatch.mins", "%s", id(kortebroek).state.c_str());

  # ---- Light page text/icons -----
  # Light 0
  - platform: homeassistant
    id: first
    entity_id: $light0
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 36;
            if (id(first).state == "on") {
              symbol=37;
            }
            id(disp1).send_command_printf("Lights.light0.pic=%i", symbol);

  # Light 1
  - platform: homeassistant
    id: second
    entity_id: $light1
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 36;
            if (id(second).state == "on") {
              symbol=37;
            }
            id(disp1).send_command_printf("Lights.light1.pic=%i", symbol);


  # Light 2
  - platform: homeassistant
    id: third
    entity_id: $light2
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 42;
            if (id(third).state == "on") {
              symbol=43;
            }
            id(disp1).send_command_printf("Lights.light2.pic=%i", symbol);

  # Light 3
  - platform: homeassistant
    id: fourth
    entity_id: $light3
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 40;
            if (id(fourth).state == "on") {
              symbol=41;
            }
            id(disp1).send_command_printf("Lights.light3.pic=%i", symbol);

  # Light 5
  - platform: homeassistant
    id: sixt
    entity_id: $light5
    on_value:
     then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 34;
            if (id(sixt).state == "on") {
              symbol=35;
            }
            id(disp1).send_command_printf("Lights.light5.pic=%i", symbol);

  # ---- Timer page ----
  - platform: homeassistant
    id: stopwatch_text
    entity_id: timer.timer
    attribute: remaining
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Stopwatch.mins", "%s", id(stopwatch_text).state.c_str());

    # id: stopwatch_text
    # entity_id: timer.timer
    # attribute: remaining
    # on_value:
    #   then:
    #     - wait_until:
    #         switch.is_on: nextion_init
    #     - lambda: id(disp1).set_component_text_printf("Stopwatch.mins", "%s", id(stopwatch_text).state.c_str());

switch:
  # ---- Physical relay -----
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    restore_mode: ALWAYS_ON
    pin:
      number: 22

  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    restore_mode: ALWAYS_ON
    pin:
      number: 19

  # Update TFT display
  - platform: template
    name: Update TFT display
    id: tft_update
    turn_on_action:
      - delay: 16ms
      - lambda: id(disp1).upload_tft();
      - switch.turn_off: tft_update

  # global variable to keep track on whether the Nextion display is ready or not. Delays initial info from HA to the display.
  - platform: template
    name: $device_name Nextion inited
    id: nextion_init
    internal: true
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true

  # Turn screen power on/off. Easy way to configure the screen power control, but this should not be used from HA, as all components must be re-initialized afterwards. For lights, names of lights etc. this practically means that the state must change once to happen.
  - platform: gpio
    name: $device_name Screen Power
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
    #internal: true

  # Disable Go to Home page-function on screen.
  # - platform: template
  #   device_class: switch
  #   name: $device_name Disable go to home
  #   id: disp1_disgth
  #   restore_state: true
  #   assumed_state: off
  #   optimistic: true
  #   on_turn_on:
  #     - lambda: id(disp1).send_command_printf("Home.disgth.val=1");
  #   on_turn_off:
  #     - lambda: id(disp1).send_command_printf("Home.disgth.val=0");
  #
  # # Disable Dim-down-function on screen.
  # - platform: template
  #   device_class: switch
  #   name: $device_name Disable dim-down
  #   id: disp1_disdim
  #   restore_state: true
  #   assumed_state: off
  #   optimistic: true
  #   on_turn_on:
  #     - lambda: id(disp1).send_command_printf("Home.disdim.val=1");
  #   on_turn_off:
  #     - lambda: id(disp1).send_command_printf("Home.disdim.val=0");
  #
  # # Disable Screensaver-function on screen.
  # - platform: template
  #   device_class: switch
  #   name: $device_name Disable screensaver
  #   id: disp1_dissleep
  #   restore_state: true
  #   assumed_state: off
  #   optimistic: true
  #   on_turn_on:
  #     - lambda: id(disp1).send_command_printf("Home.dissleep.val=1");
  #   on_turn_off:
  #     - lambda: id(disp1).send_command_printf("Home.dissleep.val=0");

number:
  # Screen brightness
  - platform: template
    name: $device_name Brightness
    id: brightness
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: 'id(disp1).set_backlight_brightness(x/100);'
        - lambda: 'id(disp1).send_command_printf("Home.brightness.val=%i", int(x));'

  # Screen brightness dimmed down
  # - platform: template
  #   name: $device_name Brightness dimdown
  #   id: brightness_dim
  #   entity_category: config
  #   unit_of_measurement: '%'
  #   min_value: 0
  #   max_value: 100
  #   step: 1
  #   initial_value: 1
  #   set_action:
  #     then:
  #       - lambda: 'id(disp1).send_command_printf("Home.brightdd.val=%i", int(x));'


# Some general configs of the board

output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21
rtttl:
  id: buzzer
  output: buzzer_out

uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
  id: tf_uart

display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: !secret nextion_update_url
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 60
        - lambda: id(disp1).send_command_printf("page 3");
        - wait_until:
            api.connected
        - switch.template.publish:
            id: nextion_init
            state: on
        - lambda: id(disp1).send_command_printf("page 0");
